<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shannon Babincsak</title>
    <description>The personal website, portfolio and blog of Shannon Babincsak: programmer, web developer, and constitutional law geek.
</description>
    <link>C:/Users/richi/jekyll-website/index.html</link>
    <atom:link href="C:/Users/richi/jekyll-website/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 07 Apr 2017 17:13:49 -0500</pubDate>
    <lastBuildDate>Fri, 07 Apr 2017 17:13:49 -0500</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Making the Most Out of GitHub Pages</title>
        <description>
&lt;p&gt;So, I’m a &lt;em&gt;pretty&lt;/em&gt; big fan of GitHub Pages.  Every time a friend wants to make a portfolio site I &lt;em&gt;always&lt;/em&gt; recommend GitHub Pages – and Jekyll, too!  If you aren’t familiar with them, &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; is free hosting for static sites (using your GitHub repositories).  &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; is a static site generator, which means you can use templates, generate pages from data files, and a bunch of other cool things you don’t normally get with plain ol’ static sites.&lt;/p&gt;

&lt;p&gt;Back in December I used GitHub Pages, Jekyll, and some other free resources to save myself about $90 a year and thought I should make a post about it so other people can save some money, too.&lt;/p&gt;

&lt;h1 id=&quot;small-business&quot;&gt;Small Business&lt;/h1&gt;
&lt;p&gt;If you’ve browsed my site before or have &lt;a href=&quot;https://www.google.com/search?q=shannon+babincsak&quot;&gt;googled my name&lt;/a&gt; then you probably already know my dad has a martial arts studio (if not, TYL).  I’ve been paying its web bills the past few years, $5-10 for the domain and $80-90 for the hosting.   It might not seem like much, but hey, &lt;strong&gt;$100 is $100&lt;/strong&gt;.&lt;/p&gt;

&lt;iframe src=&quot;//giphy.com/embed/B0dqvPg0rFW0M&quot; width=&quot;480&quot; height=&quot;397.89473684210526&quot; frameborder=&quot;0&quot; class=&quot;giphy-embed center-block&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;A martial arts studio doesn’t really need much in terms of hosting: 5-7 pages, a contact form, and a gallery (preferably automatically generated).  So why pay $80-90 for it?&lt;/p&gt;

&lt;p&gt;Better yet, why pay at all?&lt;/p&gt;

&lt;h1 id=&quot;migrating-over-to-github-pages&quot;&gt;Migrating Over to GitHub Pages&lt;/h1&gt;
&lt;p&gt;The purpose of GitHub Pages is to let people create sites for their projects, &lt;strong&gt;but they don’t &lt;em&gt;have&lt;/em&gt; to be open source&lt;/strong&gt;.  GitHub lets
you create public sites even for your &lt;em&gt;private&lt;/em&gt; repositories.  This means I can keep the code for the studio’s site in a private repository
&lt;strong&gt;for free&lt;/strong&gt; (ayyy, student pack) and host it &lt;strong&gt;for free&lt;/strong&gt;.  GitHub is also &lt;strong&gt;dependable&lt;/strong&gt; with &lt;strong&gt;good up-time&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The only restriction is that the site &lt;strong&gt;must be static&lt;/strong&gt; – you have no access to a server.  No server processing means the site will be served pretty quickly and won’t be subject to all kinds of security risks, but it also limits what you can do.  This is where Jekyll comes in.&lt;/p&gt;

&lt;h1 id=&quot;migrating-over-to-jekyll&quot;&gt;Migrating Over to Jekyll&lt;/h1&gt;
&lt;p&gt;The original site used PHP’s &lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt; for things like a header and footer and relied on PHP for the gallery.  Every time someone navigated to it, the server would grab the images in that gallery page’s folder and display them.  Jekyll supports templates, so I can minimize code repitition easily using those, but what do I do about the gallery?&lt;/p&gt;

&lt;h2 id=&quot;jekyll-plugins&quot;&gt;Jekyll Plugins&lt;/h2&gt;
&lt;p&gt;The answer: use a plugin!  Jekyll lists a bunch of plugins people have made for it over on &lt;a href=&quot;https://jekyllrb.com/docs/plugins/&quot;&gt;this&lt;/a&gt; page.  I decided to write my own plugin, though, since I wanted a few specific things from it:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Generate a gallery page for the main gallery folder and each folder inside of it&lt;/li&gt;
  &lt;li&gt;Set the page’s title based on the folder&lt;/li&gt;
  &lt;li&gt;Add each folder’s images &lt;em&gt;and&lt;/em&gt; sub-folders to the page’s data variable&lt;/li&gt;
  &lt;li&gt;Set the sub-folder’s image using an image called &lt;code class=&quot;highlighter-rouge&quot;&gt;cover.jpg&lt;/code&gt; and set each image’s &lt;code class=&quot;highlighter-rouge&quot;&gt;alt&lt;/code&gt; text using the image’s file name&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;gallery_generator.rb&lt;/strong&gt;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/codeinpink/17177e89c02958c4e8eb4f3340d34174.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As you can see, the generator plugin will go through the &lt;code class=&quot;highlighter-rouge&quot;&gt;images/gallery&lt;/code&gt; folder and generate each gallery page, setting the title, pictures, and sub-galleries (sub-folders) as it goes.  The gallery template looks like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/codeinpink/b66c912226a6831267c1f8f02f015265.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;It displays the sub-galleries first and then all of the pictures, making sure to leave out the cover picture.  For the &lt;code class=&quot;highlighter-rouge&quot;&gt;alt&lt;/code&gt; text,
I use a filter to grab the file name from the image’s path (since the path is what is passed in as &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/codeinpink/2d68051a77b14c34071e3fc12604f926.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;I don’t remember if I made this or if I got this off of Stack Overflow, but this also could have been done inside
my generator plugin.&lt;/p&gt;

&lt;p&gt;Another plugin I made was for the home page’s &lt;strong&gt;slideshow&lt;/strong&gt;.  I was tired of having to go in and manually change the images
being pointed to and their alt text.  I wanted to just put the images in a folder and have them be used for the slideshow.  Here’s my solution:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/codeinpink/7b84d3ce1dc06e4d2eca16b485e56f0c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This plugin takes all of the pictures in the &lt;code class=&quot;highlighter-rouge&quot;&gt;images/slideshow&lt;/code&gt; directory and adds them to my home page’s data variable.  In my home page’s template, I can now iterate through them like I would anything else.&lt;/p&gt;

&lt;h2 id=&quot;other-jekyll-y-things&quot;&gt;Other Jekyll-y Things&lt;/h2&gt;
&lt;p&gt;Switching over to Jekyll allowed me to also move some things into &lt;strong&gt;data files&lt;/strong&gt; instead of hard-coding them into the HTML.  I moved
the schedule, classes, instructor biographies, and services into their own data files so if I ever have to change the time a class
is offered or add a new service or instructor I can just quickly change a data file.  For example, this is how I handled classes:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/codeinpink/d221175e110d6a3fd456f525f4e9e0b6.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As you can see, all I have to do is loop through the classes in my &lt;code class=&quot;highlighter-rouge&quot;&gt;classes.yml&lt;/code&gt; data file and each class will get its section rendered.  The data file is simple enough to understand that I can even get my dad to modify it when classes change.&lt;/p&gt;

&lt;h1 id=&quot;contact-form&quot;&gt;Contact Form&lt;/h1&gt;
&lt;p&gt;A key component of every business’ site is the &lt;strong&gt;contact form&lt;/strong&gt;.  This was previously done using PHP, but I don’t have a server to use
with GitHub Pages.  Solution?  &lt;a href=&quot;https://formspree.io/&quot;&gt;FormSpree&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Whenever someone fills out the form and clicks submit, the form data is sent to their server, and they handle sending the email where it needs to go.  You’ll need to configure it for each domain (localhost for testing or the &lt;em&gt;live&lt;/em&gt; domain for production), but that takes 30 seconds.  FormSpree is pretty cool, no complaints here!&lt;/p&gt;

&lt;h1 id=&quot;domain-name&quot;&gt;Domain Name&lt;/h1&gt;
&lt;p&gt;A business obviously can’t have its site name be &lt;strong&gt;somename.github.io/business-name&lt;/strong&gt;.  This means we can’t use GitHub Pages, right?&lt;/p&gt;

&lt;iframe src=&quot;//giphy.com/embed/3oz8xrkBxxhPyVFgek&quot; width=&quot;464.0409207161125&quot; height=&quot;480&quot; frameborder=&quot;0&quot; class=&quot;giphy-embed center-block&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href=&quot;https://help.github.com/articles/using-a-custom-domain-with-github-pages/&quot;&gt;GitHub Pages works with custom domains&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h1&gt;
&lt;p&gt;In conclusion, try out GitHub Pages and Jekyll for your next site.  Most people don’t think
of them when they are tasked with creating a site for a small business, but there’s nothing stopping you from saving some money!&lt;/p&gt;
&lt;iframe src=&quot;//giphy.com/embed/11ISwbgCxEzMyY&quot; width=&quot;480&quot; height=&quot;360&quot; frameborder=&quot;0&quot; class=&quot;giphy-embed center-block&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

</description>
        <pubDate>Thu, 06 Apr 2017 00:00:00 -0500</pubDate>
        <link>http://codeinpink.github.io/blog/2017/04/making-the-most-out-of-github-pages/</link>
        <guid isPermaLink="true">http://codeinpink.github.io/blog/2017/04/making-the-most-out-of-github-pages/</guid>
        
        <category>github-pages</category>
        
        <category>jekyll</category>
        
        <category>github</category>
        
        <category>creative-frugality</category>
        
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>Google, Why Have You Forsaken Me?</title>
        <description>&lt;p&gt;As I sit here staring at the HTML of a virus scan warning page, I wonder where I went wrong in my life.  Is this because I kept using Visual Basic and
didn’t switch to C#?  Am I being punished for not buying a WinRAR license?  Is it because I (correctly) pronounce GIF with a soft G?&lt;/p&gt;

&lt;p&gt;At this point, you may be wondering what tragic experience our Google overlords inflicted upon me.
To really understand my pain and suffering, I need to explain what I’ve dealt with the past 48 hours.&lt;/p&gt;

&lt;h1 id=&quot;my-idea&quot;&gt;My Idea&lt;/h1&gt;
&lt;p&gt;My goal the past few days has been to change how the launcher I’m writing for my game project downloads patches.
Before, it would connect to our temporary FTP server and struggle to download files because:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;it’s visual basic (maybe not a real reason but real enough in my eyes), and&lt;/li&gt;
  &lt;li&gt;it’s some crappy, visual basic FTP dll&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As our need for a temporary FTP server for development transformed into a permanent need
for deployment and distribution, we tried to find a good enough web host that was cheap enough to cover
our bandwidth needs for ~2000 players. It also needed to not care as much as US-based companies do about DMCA notices for a dead, 10 year old
Star Wars MMO.  This search was proving difficult.&lt;/p&gt;

&lt;p&gt;That’s when it hit me.  We’ve been using Google Drive to distribute the game files to our players.  It’s free.
If the files get taken down then we can easily make a new account.  Why not use Google Drive as our CDN/patch server?&lt;/p&gt;

&lt;h1 id=&quot;cue-my-creative-and-inevitable-struggle&quot;&gt;Cue My Creative and Inevitable Struggle&lt;/h1&gt;

&lt;h2 id=&quot;predictability&quot;&gt;Predictability&lt;/h2&gt;
&lt;p&gt;I started writing a script in Python that generates a &lt;code class=&quot;highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt; that would contain all the patches and their relevant information,
such as the checksum and file path.  Still riding the high from discovering a new way to be
cheap and take advantage of the free resources out there, I coded away under the assumption that Google Drive files
have predictable URLs – as if my years of using Google Drive as an online file storage suddenly vanished.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;They aren’t predictable.&lt;/strong&gt;&lt;/p&gt;

&lt;iframe src=&quot;//giphy.com/embed/CtoJMGuws3mqQ?html5=true&quot; width=&quot;480&quot; height=&quot;270&quot; frameborder=&quot;0&quot; class=&quot;giphy-embed center-block&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Whoops.&lt;/p&gt;

&lt;h2 id=&quot;api-time&quot;&gt;API Time&lt;/h2&gt;
&lt;p&gt;So now my only option was to use an API to get the list of files for this &lt;em&gt;public-to-literally-anyone-on-the-internet folder&lt;/em&gt;.  Why am I emphasizing
the &lt;em&gt;public-to-literally-anyone-on-the-internet&lt;/em&gt; part?  Because I figured I should be able to just query some REST endpoint to
get the data I need for this &lt;em&gt;public-to-literally-anyone-on-the-internet folder&lt;/em&gt; and its &lt;em&gt;public-to-literally-anyone-on-the-internet files&lt;/em&gt;,
but Google doesn’t agree.&lt;/p&gt;

&lt;p&gt;Guess what, kids?  You need to be &lt;strong&gt;authorized&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;So I set up a bunch of API keys (took me a few times to figure out the one I &lt;em&gt;actually&lt;/em&gt; needed) and downloaded one of their starter scripts that
took care of most of the work for me.  I ran it, hoping to see it print a list of 10 Google Drive files as specified in the script.  Instead
what I got was my internet browser prompting me to select which of my 10 Google accounts to use and if I wanted to allow
the script to view some information about my files.&lt;/p&gt;

&lt;p&gt;Wat?&lt;/p&gt;

&lt;p&gt;Why do I need to explicitly give permission to view files that I already made public to literally anyone on the internet? &lt;a href=&quot;#footer-note-1&quot; id=&quot;footer-reference-1&quot;&gt;&lt;sup&gt;[1]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;pagesize-what-pagesize&quot;&gt;pageSize? What pageSize?&lt;/h2&gt;
&lt;p&gt;Moving on, I discovered a few pleasant things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Google generates a MD5 checksum for each file, saving me time and effort&lt;/li&gt;
  &lt;li&gt;Each file has a mime type (yes, even that &lt;code class=&quot;highlighter-rouge&quot;&gt;application/vnd.google-apps.folder&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;You can view the parents of a file and use it to create a folder structure&lt;/li&gt;
  &lt;li&gt;Each file actually has a &lt;em&gt;ton&lt;/em&gt; of information (not that I need most of it)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The bad things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You have to explicitly request each field you want, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;fields=&quot;files(id, name, md5Checksum, size)&lt;/code&gt;.
I tried to use the docs and the try-it-yourself REST interface to get the list of fields I needed, but sadly some fields didn’t
work.  Rather than play the guessing game, it was easier to just do &lt;code class=&quot;highlighter-rouge&quot;&gt;fields=&quot;files&quot;&lt;/code&gt; and call it a day (thanks, Stack Overflow! (sorry, Google server)).&lt;/li&gt;
  &lt;li&gt;Specifying &lt;code class=&quot;highlighter-rouge&quot;&gt;pageSize&lt;/code&gt;, contrary to what the docs say, doesn’t actually work.  No matter what value you give it, it will always
return 100 results.  You’ll need to use that &lt;code class=&quot;highlighter-rouge&quot;&gt;pageToken&lt;/code&gt;.  Sorry!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;download-pls&quot;&gt;Download Pls&lt;/h2&gt;
&lt;p&gt;The most important field is the download URL; this is for downloading patches, after all.  This field proved to be the most difficult.&lt;/p&gt;

&lt;p&gt;So I have my pretty-printed json manifest that my launcher gets and uses to compute which files it needs to download.  Everything
is going well until I try to actually download a file.  It downloads something, but not the file I wanted it to download: it’s the HTML
of the download page.&lt;/p&gt;

&lt;p&gt;Each file in the list contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;webContentLink&lt;/code&gt;, but simply downloading each file’s &lt;code class=&quot;highlighter-rouge&quot;&gt;webContentLink&lt;/code&gt; isn’t going to work.  What I really
needed to download was the response’s &lt;code class=&quot;highlighter-rouge&quot;&gt;ResponseUri&lt;/code&gt;.  Kind of wonky to have the launcher visit a URL only to download something else, but
it works, I guess?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Just kidding.&lt;/strong&gt;  At least, kinda.&lt;/p&gt;

&lt;p&gt;It was working… for ~200 of the files.  It downloaded them, and the checksums matched up.  Some of them weren’t working, though.
Every restart of the program would report that it needed to download 50ish files.  My first guess was to check the checksums: was it calculating
them correctly?  Next, maybe it was my logic.  Was I correctly accounting for case when comparing checksums?  Did I somehow mess up the conditions
that determine when I need to download a file?&lt;/p&gt;

&lt;p&gt;As I was scrolling through the files trying to figure out what it could be, something in the corner of my eye caught my attention: a
crispy 36 KB under the Size column of my File Explorer window.  Actually, to be precise, multiple 36 KB entries.&lt;/p&gt;

&lt;p&gt;Okay, maybe it’s on Google’s end.  Are they stopping my download at a certain
size?  My search reported nothing.  If they aren’t limiting the download, then what the hell is the launcher downloading?&lt;/p&gt;

&lt;p&gt;Because Atom seriously sucks for viewing large documents and while 36 KB isn’t much I don’t want to also deal with any possible disappointment
from my favorite text editor, I threw that &lt;code class=&quot;highlighter-rouge&quot;&gt;patch_09.tre&lt;/code&gt; bad boy into Notepad++ and was amazed. &lt;a href=&quot;#footer-note-2&quot; id=&quot;footer-reference-2&quot;&gt;&lt;sup&gt;[2]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I was looking at yet another HTML document.&lt;/strong&gt;&lt;/p&gt;

&lt;iframe src=&quot;//giphy.com/embed/QUCNMrMxExBeM?html5=true&quot; width=&quot;480&quot; height=&quot;360&quot; frameborder=&quot;0&quot; class=&quot;giphy-embed center-block&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;but-wait-theres-more&quot;&gt;But Wait, There’s More!&lt;/h2&gt;
&lt;p&gt;Google detected that I was almost done and wanted to throw one more obstacle in my path – only, this obstacle is more like tire killers
and I just lost my 2 front tires when I was almost at the finish line.&lt;/p&gt;

&lt;p&gt;If you’ve ever downloaded a large file from Google Drive, you may remember being warned about how the file size exceeded the size that Google
can scan and that it may or may not contain a virus.  For each large file you would need to click “Download Anyway” to proceed.  See where
I’m going with this?&lt;/p&gt;

&lt;p&gt;Downloading does work… If your file is under 25 MB.  At 25 MB Google warns you about a virus, and that 36 KB warning page is
what’s being downloaded.  50ish times.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nice.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So now I need to check the size of the file I’m about to download, and if it’s &amp;gt;= 25 MB then I need to parse that page for the download
link inside that “Download Anyway” button since it’s randomly generated each time you refresh the page.  Doable, right?  That means it’s
not gonna work.  Sorry.&lt;/p&gt;

&lt;p&gt;Google also sets a cookie with a randomized key/value pair, and I assume it verifies that with the confirm key in the “Download Anyway” link.&lt;/p&gt;

&lt;h2 id=&quot;cant-stop-wont-stop-not-really&quot;&gt;Can’t Stop, Won’t Stop (Not Really)&lt;/h2&gt;
&lt;p&gt;Once I got to this section of the post I thought, “Hm, what if?” and attempted to work around this problem.  The key may be random, but I can
still get it from the header, and if I can get it and set it in my next request then maybe it will work instead of returning an error.&lt;/p&gt;

&lt;p&gt;Well, after 30 minutes, I can say that’s not doable. &lt;a href=&quot;#footer-note-3&quot; id=&quot;footer-reference-3&quot;&gt;&lt;sup&gt;[3]&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Maybe I’m missing some other cookies that might be needed, or maybe setting the cookies
isn’t good enough because there’s some other magical voodoo check that Google is doing to protect all the grandmas out there from
accidentally getting a virus instead of a picture of little Joey at soccer practice.&lt;/p&gt;

&lt;iframe src=&quot;//giphy.com/embed/aMjfEsaBsbqCs?html5=true&quot; width=&quot;480&quot; height=&quot;415&quot; frameborder=&quot;0&quot; class=&quot;giphy-embed center-block&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;I could keep trying, but at this point I really need to ask myself why I keep trying to force this to happen when it so clearly
&lt;em&gt;isn’t&lt;/em&gt; going to happen.  In Google’s eyes I’m some sinister hacker/malware-provider/something-else-bad, but really I’m just a nerd
who wants the thousands of other Star Wars nerds to enjoy this 10 year old, shut down, non-profit Star Wars MMO without having
to rely on even more donations to cover the bandwidth of an actual patch server.&lt;/p&gt;

&lt;p&gt;After researching the alternatives, I think we’ll probably need to just spend the money on an actual server and hope for the best.
I mourn the loss of what could have been great, though.  Google/Google Drive API crushed my frugal, creative
dreams and let me down, and it’s time for me to go home.&lt;/p&gt;

&lt;iframe src=&quot;//giphy.com/embed/3o7Zesyac4CuSN5rsA?html5=true&quot; width=&quot;480&quot; height=&quot;360&quot; frameborder=&quot;0&quot; class=&quot;giphy-embed center-block&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Wed, 10 Aug 2016 00:00:00 -0500</pubDate>
        <link>http://codeinpink.github.io/blog/2016/08/google-why-have-you-forsaken-me/</link>
        <guid isPermaLink="true">http://codeinpink.github.io/blog/2016/08/google-why-have-you-forsaken-me/</guid>
        
        <category>google-api</category>
        
        <category>rant</category>
        
        <category>creative-frugality</category>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>I Wish Every Work Day Was a Hackathon Day</title>
        <description>&lt;p&gt;I just participated in my &lt;em&gt;fifth&lt;/em&gt; ADTRAN hackathon and won People’s Choice for the second
time.  The idea?  A HipChat bot that you can program on the fly (thanks, Pat!).  Considering it’s
a chat bot and we named it Bender, the image above is &lt;em&gt;very&lt;/em&gt; fitting.  However, while I’m still pretty happy
from winning some cool swag (a t-shirt and a new mug!), part of
me is sad because I have to return to daily work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I wish every work day was a hackathon day.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;but-why&quot;&gt;But Why?&lt;/h2&gt;

&lt;p&gt;You might be wondering why I would &lt;em&gt;want&lt;/em&gt; to subject myself to the torture that is pulling all-nighters
in a crowded room of people who won’t be showering the next 48 hours &lt;em&gt;every day&lt;/em&gt;.  Valid question!&lt;/p&gt;

&lt;p&gt;Work hackathons are unique in that, unlike normal hackathons, you aren’t expected to pull all-nighters.
At ADTRAN, the hackathon is just one work day, and it’s up to you how much of your time you want to
spend on your project.  No all-nighters or crowded rooms of smelly people.&lt;/p&gt;

&lt;p&gt;Now, that doesn’t mean I don’t put in &lt;em&gt;a lot&lt;/em&gt; of time, though, because I do.  I’m not going to say how late
I’ve stayed, so I’ll just say that it’s late enough to notice how gross the elevators smell after the hot air
has been trapped inside for hours… and late enough to have to take the stairs because the elevators stopped
running.&lt;/p&gt;

&lt;p&gt;So, while I end up working way more than my 8 hours on a hackathon day, it isn’t &lt;em&gt;required&lt;/em&gt; or forced.  I don’t
have to subject myself to any suffering as a result of staying up 24 hours and staring at a computer screen for almost
that long (I can already imagine the killer headache I’d have).  It’s pleasant!&lt;/p&gt;

&lt;h2 id=&quot;fun-fun-fun&quot;&gt;Fun Fun Fun&lt;/h2&gt;
&lt;p&gt;So why do I want every work day to be a hackathon day?  Because it brings me back to school when we could make our
own teams and work on something &lt;strong&gt;fun&lt;/strong&gt; together.  You could talk and crack jokes as long as you got the work done.
It was work, but it didn’t &lt;em&gt;feel&lt;/em&gt; like work.  That’s the best kind.&lt;/p&gt;

&lt;p&gt;Don’t get me wrong.  I also enjoy being able to work on new or different technologies that I don’t normally get to
use at work; even one of my favorite projects started out as a hackathon project.  When I look back on all my hackathons, though,
my best hackathon memories are just experiences from working with a groups of friends, like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Demoing our &lt;strike&gt;crappy&lt;/strike&gt; very simple “ADTRAN Life Alert” mobile app for the first time (yes, it’s as awesome as you think it is)&lt;/li&gt;
  &lt;li&gt;Photoshopping &lt;a href=&quot;http://programmer.97things.oreilly.com/wiki/images/8/82/UncleBob.jpg&quot;&gt;Uncle Bob&lt;/a&gt; saving the Life Alert lady in front of a TA5K in an ADTRAN lab (done by &lt;em&gt;yours truly&lt;/em&gt;)&lt;/li&gt;
  &lt;li&gt;Discovering and then cursing how HipChat doesn’t support Markdown (seriously, it’s &lt;em&gt;2016&lt;/em&gt; and you’re like the &lt;em&gt;only&lt;/em&gt; chat program that doesn’t support markdown)&lt;/li&gt;
  &lt;li&gt;Celebrating a victory after listening to two teammates struggle for hours on how to properly handle HipChat’s
weird whitespace/encoding stuff when getting multi-line messages of what needs to be Python code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Is it possible for every work day to feel like a hackathon day?  Probably not.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s to hoping, though.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 09 Jul 2016 00:00:00 -0500</pubDate>
        <link>http://codeinpink.github.io/blog/2016/07/i-wish-every-day-was-a-hackathon-day/</link>
        <guid isPermaLink="true">http://codeinpink.github.io/blog/2016/07/i-wish-every-day-was-a-hackathon-day/</guid>
        
        <category>work</category>
        
        <category>hackathon</category>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>My Latest Z-index Problem</title>
        <description>&lt;p&gt;Two months ago I launched a site for a gaming project that I’m involved in.  I
received a lot of good feedback from people, but it wasn’t long before I had my
first bug report, something I was expecting from my lack of browser testing: the
navigation dropdown on iPhones was behind the home page content.  &lt;em&gt;Great&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt;
&lt;p&gt;You could probably guess that I was using Bootstrap (&lt;strong&gt;correct&lt;/strong&gt;), and if you have
a decent understanding of CSS, you also know just by looking at the image that it’s a
z-index issue.  Somehow, &lt;em&gt;only on iPhones&lt;/em&gt;, the navbar was showing behind the other
content on the page.  No other device/platform had this problem.  One thing you
probably &lt;em&gt;don’t&lt;/em&gt; know is that the screenshot
isn’t mine because &lt;strong&gt;I don’t even own an iPhone&lt;/strong&gt;.  Nothing quite like blindly trying to solve
a platform-specific bug.&lt;/p&gt;

&lt;p&gt;I specified z-index on various elements (nav, nav elements, carousel, announcements, etc.) – &lt;strong&gt;nothing&lt;/strong&gt;.
I googled, tried a few suggestions on Stack Overflow – &lt;strong&gt;nothing&lt;/strong&gt;.  What the hell?
That’s when I came across &lt;a href=&quot;http://sevenspark.com/diagnosis/z-index-submenu-hidden-behind-content&quot; target=&quot;_blank&quot;&gt;this article&lt;/a&gt;.
I didn’t even have to read all of the article to identify the issue.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The Solution&lt;/h2&gt;
&lt;p&gt;At some point &lt;code class=&quot;highlighter-rouge&quot;&gt;position: static&lt;/code&gt; had made its way into my styling of &lt;code class=&quot;highlighter-rouge&quot;&gt;.navbar&lt;/code&gt;.
I don’t know if it came from one of the suggestions on Stack Overflow or something else,
but it was the problem.  Like the article says, &lt;strong&gt;z-index only affects elements with position –
NOT STATIC ELEMENTS.&lt;/strong&gt;  Sure enough, I removed that styling and my nav-related
z-index additions worked.&lt;/p&gt;

&lt;p&gt;This frustrating (&lt;em&gt;and small&lt;/em&gt;) bug taught me or reminded me of a few things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Don’t use &lt;code class=&quot;highlighter-rouge&quot;&gt;position: static&lt;/code&gt; when also specifying z-index&lt;/li&gt;
  &lt;li&gt;I’m still not a master at CSS&lt;/li&gt;
  &lt;li&gt;Most people aren’t masters at CSS, either&lt;/li&gt;
  &lt;li&gt;Cross browser testing is still very important (&lt;em&gt;and valuable&lt;/em&gt;)&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 17 May 2016 00:00:00 -0500</pubDate>
        <link>http://codeinpink.github.io/blog/2016/05/my-latest-z-index-problem/</link>
        <guid isPermaLink="true">http://codeinpink.github.io/blog/2016/05/my-latest-z-index-problem/</guid>
        
        <category>css</category>
        
        <category>ios</category>
        
        
        <category>web development</category>
        
      </item>
    
      <item>
        <title>My Second Term at ADTRAN: First Month</title>
        <description>&lt;p&gt;I returned in August for my second term as a co-op, and this term I got the &lt;strong&gt;UX/UI
team&lt;/strong&gt;, a team I really wanted. Over the summer, I learned Django, a MVT back end
framework, but I didn’t know any MVC front end frameworks yet. Spending a term
with these guys would &lt;em&gt;definitely&lt;/em&gt; teach me more about front end development since
that’s all I would be doing! &lt;em&gt;Well, that’s what I thought, at least&lt;/em&gt;. The first month has actually been an interesting
mix of work. I’m &lt;em&gt;supposed&lt;/em&gt; to develop the front end for key products using Angular,
but outside of ensuring cross-browser compatibility, all of my development has been
for miscellaneous (and unplanned) things!&lt;/p&gt;

&lt;h2 id=&quot;wordpress-plugin&quot;&gt;Wordpress Plugin&lt;/h2&gt;
&lt;p&gt;My first task was to update one of our internal training sites and add a way to
track who has seen what videos. Surprisingly, a Wordpress plugin that does &lt;em&gt;just&lt;/em&gt; this
&lt;strong&gt;doesn’t actually exist&lt;/strong&gt;. I had to write my own plugin, and since I hadn’t written
a Wordpress plugin before (or used PHP in a few years), this was &lt;strong&gt;pretty daunting&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Thankfully, there were plugins I could look at to get a general idea of what I
needed to do, but what I noticed was that developing a plugin for Wordpress &lt;em&gt;kind
of sucks&lt;/em&gt; – at least, as a beginner. There’s no structure. &lt;em&gt;None&lt;/em&gt;. One plugin had all of its code in one long
file, and another had at least separated its views from its controllers, but that one still
had some functions ~50 lines long. Ultimately, I suppose it &lt;em&gt;is&lt;/em&gt; up to &lt;em&gt;us&lt;/em&gt;, the developers, to
structure our code, but I really do appreciate how some frameworks really force the
idea of “separation of concerns.” I also appreciate MVC/T frameworks in general, which
again goes back to my complaint about lack of structure.&lt;/p&gt;

&lt;p&gt;In the end, I wrote a Wordpress plugin in PHP and JavaScript to track, display, and export
video plays and the users associated with the plays. While I had complained earlier, my
plugin was &lt;em&gt;too small&lt;/em&gt; to even be concerned about structure, and like I said, the
responsibility is on &lt;em&gt;us&lt;/em&gt;, the developers, to write good code. Now that I somewhat
understand how to write a Wordpress plugin, I don’t think it’s too bad. It’s actually
kind of fun!&lt;/p&gt;

&lt;h2 id=&quot;cross-browser-compatibility&quot;&gt;Cross Browser Compatibility&lt;/h2&gt;
&lt;p&gt;Everyone loves to joke about how crappy IE is, but you don’t &lt;strong&gt;truly&lt;/strong&gt; understand
until you’re trying to make something compatible with it. My problems with IE started
before I could even look at the debugger, &lt;strong&gt;literally&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;tagline&quot;&gt;&lt;h3&gt;I couldn't even use the debugger. The browser
itself would show a stack trace whenever I tried to open it.&lt;/h3&gt;&lt;/div&gt;

&lt;p&gt;Do you know how hard it is to fix &lt;strong&gt;major&lt;/strong&gt; CSS issues in IE without using the
debugger? It’s even more difficult when some problems exist in IE10 but not IE11,
and &lt;em&gt;especially&lt;/em&gt; when they exist in IE11 but not IE10 – which, by the way,
makes me wonder: &lt;strong&gt;how is that even possible?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thankfully, when I restarted my computer the next week the problem went away, so I could
finally use my debugger and actually test on IE10. I can say with certainty, however, that the
time spent fixing these IE issues was the most bored I have ever been at work. I
actually &lt;em&gt;dreaded&lt;/em&gt; going to work because of how &lt;strong&gt;boring&lt;/strong&gt; it was. Eek.&lt;/p&gt;

&lt;p&gt;Now that I have worked on making something compatible in IE, it actually &lt;strong&gt;scares&lt;/strong&gt; me
to think about what all of my sites might look like in that browser. I saw some &lt;strong&gt;weird
stuff&lt;/strong&gt;, man.&lt;/p&gt;

&lt;h2 id=&quot;hackathon--psi-planning-tool&quot;&gt;Hackathon / PSI Planning Tool&lt;/h2&gt;
&lt;p&gt;I also participated in my third hackathon! My team’s project was a PSI planning tool
that teams could hopefully use a week and a half later for PSI planning. Our goal
for the hackathon was a web app in which teams could commit to features and add risks and
dependencies for each commitment, preferably using some type of wizard to make the process more
enjoyable. We had something like this for the hackathon, though the wizard that
someone on our team worked on was completely separate and was never hooked up
to the rest of the app or the back end and was discarded afterwards. We were definitely
too optimistic about how much the three of us could accomplish in one day!&lt;/p&gt;

&lt;p&gt;Two of us continued working on the tool once the hackathon was over, but I ended up
doing all of the back end and most of the front end. This gave me pretty good
experience with Django and Angular. I knew Django going into this, but it’s always
good to solidify things, and I got to try out Django REST Framework which I now love.
Seriously. I went into the hackathon thinking the package wouldn’t do what I needed it to do
and that I would have to write the all of the urls and queries myself, but Django REST Framework
is super flexible and customizable. I also finally got to learn and use &lt;strong&gt;a lot&lt;/strong&gt; of Angular!
MVC front end frameworks are great, and I’m excited now that I finally know one!&lt;/p&gt;

&lt;p&gt;The company used it for PSI planning! If you want to read more, you can
&lt;a href=&quot;/#/portfolio/portfolio/psi-planning-tool&quot;&gt;view the project entry&lt;/a&gt; for it, and if
you want to see (or even use) the project, you can
&lt;a href=&quot;http://github.com/codeinpink/project-saturn&quot;&gt;view it on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Stay tuned for more info about the rest of my term!&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Sep 2015 00:00:00 -0500</pubDate>
        <link>http://codeinpink.github.io/blog/2015/09/my-second-term-at-adtran-first-month/</link>
        <guid isPermaLink="true">http://codeinpink.github.io/blog/2015/09/my-second-term-at-adtran-first-month/</guid>
        
        <category>work</category>
        
        <category>wordpress</category>
        
        <category>angular</category>
        
        <category>django</category>
        
        <category>hackathon</category>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>My First Term at ADTRAN</title>
        <description>&lt;p&gt;When I accepted an offer to co-op at ADTRAN, I was initially worried about what I’d work on.
ADTRAN is in the telecommunications industry, so most of their software
developers probably work on embedded programming. My resume had a lot on it, but all of
the recent things were web-related, and I wanted to learn back end web development.
However, I also wanted to work on something that wouldn’t &lt;em&gt;just&lt;/em&gt; be a typical CRUD
application. Would I find a fit? Would I enjoy my work?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Yes!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I obviously didn’t know this back then, but many companies need some kind
of web development done; it doesn’t have to be your typical customer-facing
website. In my case, it was one of ADTRAN’s internal sites used to help developers
with packaging code. I was lucky to start my term when the site was still very small,
so I worked on a lot of fun features and saw the site grow from one page to 6-7 +
~200 (dynamic). Furthermore, the site wasn’t just a CRUD application.&lt;/p&gt;

&lt;div class=&quot;tagline&quot;&gt;&lt;h3&gt;The features I worked on taught me a lot and, overall,
helped me grow as a programmer, software engineer, and web developer.&lt;/h3&gt;&lt;/div&gt;

&lt;p&gt;(In the rest of this post, when I refer to packages, I mean packages of code.)&lt;/p&gt;

&lt;h2 id=&quot;my-team&quot;&gt;My Team&lt;/h2&gt;
&lt;p&gt;My team’s responsibilities were maintaining and developing tools for packaging, getting
more of the code base packaged, and planning and guiding the future of packages at
the company.  One task that
all of us participated in was releasing packages, and a fun tradition was to send
funny pictures whenever one of us released a package. My pictures typically involved
cats, sea creatures, or weird animal hybrids – the best kind of pictures.&lt;/p&gt;

&lt;h2 id=&quot;my-mentor&quot;&gt;My Mentor&lt;/h2&gt;
&lt;p&gt;My mentor, Pat, was pretty awesome! He took my interests into consideration when planning
later features, provided excellent advice and guidance, and often taught me new things
and encouraged me to always learn more. He was also a fun person to share funny pictures
with, so there’s that.&lt;/p&gt;

&lt;h2 id=&quot;things-i-worked-on&quot;&gt;Things I Worked On&lt;/h2&gt;
&lt;p&gt;I won’t bore you with &lt;em&gt;literally every single thing&lt;/em&gt; I worked on while at ADTRAN,
but I will give an overview of my term and talk about the things I found fun!&lt;/p&gt;

&lt;h3 id=&quot;first-few-releases&quot;&gt;First Few Releases&lt;/h3&gt;
&lt;p&gt;The beginning of my term was spent making small changes to the site: bug fixes,
a design overhaul, and small, new features or improvements, such as adding
autocomplete to email fields or adding a new form to the site. I also tried to
clean up (through refactoring or deleting) the site’s code as I went along, and
I made small improvements whenever I could. These things were meant to get me accustomed
to the site’s code and Python in general, a language I didn’t know yet.&lt;/p&gt;

&lt;h3 id=&quot;admin-page&quot;&gt;Admin Page&lt;/h3&gt;
&lt;p&gt;In late February, I started releasing major updates to the site, the first being an admin
page to release packages. Before the admin page, releasing packages required doing a lot
of checks, SSHing into the package server, and manually moving a package from one folder to
the next (an obvious contender for automation, right?!). This was spread across multiple
windows, and if you weren’t careful you could accidentally delete a folder or move it by
accident (&lt;em&gt;cough&lt;/em&gt;). Being able to release a package through the site would at
least take care of the easily-automated portion – plus ease the minds of the
(rightfully) paranoid.&lt;/p&gt;

&lt;p&gt;The next release added onto the admin portion of the site by showing a list of
packages pending release, information on the request, and who was taking care of
the package (if anyone yet). It also added more actions, so the someone could
sign up for a package, reject a package, or release a package with the click
of a button.&lt;/p&gt;

&lt;p&gt;My team &lt;em&gt;really&lt;/em&gt; loved this one. To put this into perspective, a
few weeks prior we had &lt;em&gt;one&lt;/em&gt; person request ~15-20 packages to be released at &lt;em&gt;once&lt;/em&gt;,
and some of the packages needed fixing, so there was discussion in emails. &lt;strong&gt;And it was
awful&lt;/strong&gt;. So many emails to go through, so many packages to keep track of, and so
many steps to go through for each package. With these changes, releasing a package
could take under two minutes if the changes were small enough.&lt;/p&gt;

&lt;p&gt;This was my first experience building a dynamic page! Once finished loading, the page gets
the package request info from the server and constructs a table with it. The page
then fetches this data every 5 or 10 seconds and reconstructs the table if there
were any changes.&lt;/p&gt;

&lt;h3 id=&quot;sharepoint-replacement-aka-release-notes-scraper&quot;&gt;Sharepoint Replacement AKA Release Notes Scraper&lt;/h3&gt;
&lt;p&gt;The next major release was in late March for a SharePoint replacement (called
Release Notes Scraper) which would automatically post release notes of released
packages onto the package site. Before this, teams would have to frustratingly
deal with posting release notes on SharePoint every time they released
a new package version – and the release notes were typically just copy-pasted,
yet another contender for automation!&lt;/p&gt;

&lt;p&gt;Getting the release notes file was easy; Python’s tarfile library made it
simple to get a list names of the contents inside each package tarball, so I just
had to get the file with “releasenotes.txt” in its name. From there, I had to make some
assumptions about the content of the file. Fortunately, one of the requirements to
release a package was that the release notes needed to contain the previous
release notes and release versions, the current release notes, and the current
release version, so I could assume it had these things. The problem was that
people also included other information between the release version and the
release notes. This stuff could be useful to collect, but it meant that parsing
these files wouldn’t be so uniform. From looking at random packages, I made my
assumptions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Releases are separated by at least two “=”&lt;/li&gt;
  &lt;li&gt;The release notes may reference a previous release (and thus include a previous
release version)&lt;/li&gt;
  &lt;li&gt;A release header contains the version number and misc. info, and it is separated
from the release notes by yet another two “=”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using these assumptions, I made my release parser as a state design pattern which
would determine the current line type based on regex and then insert the line into
the appropriate dictionary key. I would just need to feed it the contents of the
file, and it would signal when done, returning to me the contents of a release
separated into the version, date, header, and release notes. From there, I just
needed to call this after every release and then store the results in the database.&lt;/p&gt;

&lt;p&gt;To take care of the old releases for all ~200 packages as well as
any packages that might be missed on a day-to-day basis, I made a thread that would
collect all of the releases for every package once a day using the latest release
for that package. Since each release should contain the previous releases’ release
notes, I could use one release per package to get all of the release notes while
avoiding having to go through each release for every package. Efficient!&lt;/p&gt;

&lt;p&gt;The next release added onto this by offering the ability to subscribe to and unsubscribe
from packages for release notifications via email. This was one of the features of
using SharePoint, and if we were going to replace SharePoint, we obviously needed
to offer this feature, too.&lt;/p&gt;

&lt;p&gt;The SharePoint Replacement/Release Notes Scraper was my biggest release and my
favorite!&lt;/p&gt;

&lt;div class=&quot;tagline&quot;&gt;&lt;h3&gt;It was pretty big, wanted by many people, and it was
fun designing the different parts of this system and making them interact with each other.&lt;/h3&gt;&lt;/div&gt;

&lt;p&gt;I also got some good experience working with a database and good exposure to MongoDB, a type of database that
wasn’t covered in my Database Management class.&lt;/p&gt;

&lt;h2 id=&quot;final-releases&quot;&gt;Final Releases&lt;/h2&gt;
&lt;p&gt;The last few features of my term were pretty small. I got a little experience with
D3.js by adding a feature that would track the number of files in one of
our products and then using this information in a graph which would show changes
over time.&lt;/p&gt;

&lt;p&gt;The next feature tracked the different package requests (release/creation), and I
added a page with a simple date-picker so my team would be able to get these
numbers for a specified time range.&lt;/p&gt;

&lt;p&gt;My last feature was actually incorporating my second hackathon project into the
site! See below to read about it.&lt;/p&gt;

&lt;h2 id=&quot;hackathons&quot;&gt;Hackathons&lt;/h2&gt;
&lt;p&gt;One of the really cool things about ADTRAN is that it has internal hackathons once (sometimes twice!) an iteration.
It’s only for one day, and you work on your project during work hours, so it doesn’t require any weekend commitments
or crazy hours (thankfully); the only requirement is that it benefits the company!&lt;/p&gt;

&lt;p&gt;I participated in my first hackathon in mid February as part of my mentor’s group,
and we won our category! I did the front end work for the project, so I
worked with JavaScript and jQuery to display and update certain data.&lt;/p&gt;

&lt;p&gt;In mid April (actually a few days before my birthday!), I participated in my
second hackathon. This project automatically generated online documentation
for each package using Doxygen and converted each package’s user guide into
HTML. Just like with the Release Notes Scraper, this would generate the
documentation/convert the user guide after a package is released and would run daily
to catch any missing packages. We didn’t win, but I was really happy with the project
because it was really useful to any package users at ADTRAN, and I had plenty of time
left in the term to implement it into the site!&lt;/p&gt;

&lt;p&gt;Now that I have experienced two hackathons, I really hope my future company has
them, too!&lt;/p&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;
&lt;p&gt;Like many other Computer Science students have experienced, college doesn’t really
teach you to test your code. If we want to know that something works, we’ll run our
code and add in some print statements. Thankfully, this isn’t how it’s done in
the real world – at least, &lt;em&gt;I hope not&lt;/em&gt;. I learned how to test my code and how
important testing is.&lt;/p&gt;

&lt;div class=&quot;tagline&quot;&gt;&lt;h3&gt;Of course it's useful to make sure the code you're
writing works, but it also helps to know that you didn't break any
existing code in the process.&lt;/h3&gt;&lt;/div&gt;

&lt;p&gt;We tested as much of the site as we could, so I had to write &lt;em&gt;a lot&lt;/em&gt; of tests.
In particular, I got a lot of experience using Selenium WebDriver, a browser
automation tool. We used Selenium WebDriver to test each of the site’s pages by
going through actions like a typical user would and then checking that everything was working
properly. I can’t recommend Selenium WebDriver enough.&lt;/p&gt;

&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h2&gt;
&lt;p&gt;Overall, my first term was pretty great! I was fortunate enough to have an
awesome mentor and get to work on things that were really interesting and fun.
This term also taught me &lt;em&gt;so&lt;/em&gt; much about programming, Python, testing, and web development!
This experience was very rewarding, and I hope my next term will be just as great!&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Jul 2015 00:00:00 -0500</pubDate>
        <link>http://codeinpink.github.io/blog/2015/07/my-first-term-at-adtran/</link>
        <guid isPermaLink="true">http://codeinpink.github.io/blog/2015/07/my-first-term-at-adtran/</guid>
        
        <category>work</category>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Adding Autocomplete/Suggestions to Inputs Through Twitter's Typeahead</title>
        <description>&lt;p&gt;I recently used Twitter’s JavaScript library &lt;strong&gt;typeahead.js&lt;/strong&gt; (now referred to
as &lt;strong&gt;typeahead&lt;/strong&gt; in the rest of the post) in one of my projects,
&lt;a href=&quot;http://mymovielib.com/&quot;&gt;MovieLib&lt;/a&gt;, and I can’t wait to use it again!
Once I understood how to use it, it was easy to implement it into my project, and I
think it really improved the user experience in a few areas of the site.&lt;/p&gt;

&lt;p&gt;This post will show the code/styling I used to achieve the autocomplete that MovieLib uses.
I remember I couldn’t quite get my suggestions working right when I first started out,
so hopefully this helps out someone else!&lt;/p&gt;

&lt;h2 id=&quot;some-background&quot;&gt;Some Background&lt;/h2&gt;
&lt;p&gt;The first place I implemented typeahead is in the search bar, so users can see movie results as they
type in the title of the movie they’re looking for. The more important place, however,
is in one of the forms used to add movies to a user’s library.&lt;/p&gt;

&lt;p&gt;By default, the form’s input for the movie field is a select field, but since MovieLib has more than
400,000 movies in the database, loading all of those into the user’s form would &lt;em&gt;surely&lt;/em&gt;
fail. The second option is to change the form input to a text field, which then
presents two more options: title or id? Since one movie can share a title with many
other movies, the title can’t be used here since the server won’t know what movie to add.
The IMDB ID is the clear winner.&lt;/p&gt;

&lt;div class=&quot;tagline&quot;&gt;&lt;h3&gt;But, that's &lt;em&gt;still&lt;/em&gt; wrong because what user would want
to google for the IMDB ID of each movie they own &lt;em&gt;just&lt;/em&gt; to add it to their library?&lt;/h3&gt;&lt;/div&gt;

&lt;p&gt;This is where typeahead comes in! The user can type the movie title into a text field,
select the movie, and the server will get the IMDB ID of the movie selected. Crisis
averted!&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;First, visit &lt;a href=&quot;https://github.com/twitter/typeahead.js&quot;&gt;typeahead’s github page&lt;/a&gt; and
download &lt;a href=&quot;http://twitter.github.io/typeahead.js/releases/latest/typeahead.bundle.js&quot;&gt;typeahead.bundle.js&lt;/a&gt; or &lt;a href=&quot;http://twitter.github.io/typeahead.js/releases/latest/typeahead.bundle.min.js&quot;&gt;typeahead.bundle.min.js&lt;/a&gt;. This library depends
on &lt;a href=&quot;https://jquery.com/&quot;&gt;jQuery&lt;/a&gt;, so you obviously need that, too. Make sure these files
are included.&lt;/p&gt;

&lt;h2 id=&quot;adding-typeahead-to-search-bar&quot;&gt;Adding Typeahead to Search Bar&lt;/h2&gt;
&lt;p&gt;Add your search input if you don’t have one already, and make sure you have a way to uniquely identify this input. Mine looked like this:&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;&amp;lt;input type=&quot;text&quot; class=&quot;form-control typeahead&quot; name=&quot;q&quot; id=&quot;q&quot; placeholder=&quot;Search Movies...&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To start with, we need to initialize our search bar’s typeahead once the page is
done loading, so add this to your JavaScript file:&lt;/p&gt;

&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;$(document).ready(function() {
    setSearchAutocomplete();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we need to make the setSearchAutocomplete function that will be called.
Add the following function:&lt;/p&gt;

&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;function setSearchAutocomplete() {
    var movies = new Bloodhound({
        datumTokenizer: function(d) {return Bloodhound.tokenizers.whitespace(d.title); },
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        remote: {
            url: '/autocomplete/movies?q=%QUERY%',
            wildcard: '%QUERY%'
        }
    });

    // .typeahead is the selector for my search bar
    setTypeaheadBinding('.typeahead', movies);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function creates a Bloodhound object and then calls
a function to initialize typeahead using this Bloodhound object on the given selector.
Bloodhound is the suggestion engine that you’re passing in when you initialize
your instance of typeahead. Here is a break down of what each part does:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;This queryTokenizer removes the whitespace before it tokenizes the query (turns
it into an array of string tokens)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The datumTokenizer is what tokenizes each datum. Like with the queryTokenizer,
I want it to remove the whitespace, but I also want it to return the title of the
datum object. Why? Because when it gets data from the
specified URL, the server returns results in this format:
&lt;code class=&quot;highlighter-rouge&quot;&gt;[{&quot;title&quot;: title &quot;imdb_id&quot;: imdb_id, &quot;plot&quot;: plot, &quot;year&quot;: year, &quot;poster&quot;: poster}, {...}, ...]&lt;/code&gt;
I want my suggestions to be based off of the title of the movie, so that’s why I
return the title of the datum object. Without returning the title, it will base
suggestions off of &lt;em&gt;all&lt;/em&gt; properties of the datum object (plot, year, etc), which wouldn’t be useful.
If you’re wondering what the other information is for, I use those in the movie
suggestion displays (or “movie cards”).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bloodhound can either have a local source or a remote source, and since I am dealing
  with movie suggestions, I use remote so that it can fetch results for the given
  query from my server&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bloodhound has other options which you can utilize, such as prefetching data, and
you can even make your own tokenizers, but this was all I needed.&lt;/p&gt;

&lt;p&gt;Now, we will finally initialize typeahead on our given element. Add the following
function:&lt;/p&gt;

&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;function setTypeaheadBinding(selector, adapter) {
    $(selector).typeahead(null, {
        name: 'movies',
        displayKey: 'title',
        source: adapter.ttAdapter(),
        templates: {
            empty: [
                '&amp;lt;div class=&quot;empty-message text-center&quot;&amp;gt;',
                'No movies found.&amp;lt;br&amp;gt;',
                '&amp;lt;a href=&quot;/search&quot; class=&quot;text-center&quot;&amp;gt;More Advanced Search&amp;lt;/a&amp;gt;',
                '&amp;lt;/div&amp;gt;',
            ].join('\n'),
            suggestion: function(data) {
                return ['&amp;lt;div class=&quot;movie-card&quot;&amp;gt;',
                      '&amp;lt;img class=&quot;movie-card-poster&quot; src=&quot;' + data.poster + '&quot;&amp;gt;',
                      '&amp;lt;div class=&quot;movie-card-details&quot;&amp;gt;',
                      '&amp;lt;div class=&quot;movie-card-name&quot;&amp;gt;' + data.title + '&amp;lt;/div&amp;gt;',
                      '&amp;lt;div class=&quot;movie-card-year pull-right&quot;&amp;gt;' + data.year + '&amp;lt;/div&amp;gt;',
                      '&amp;lt;div class=&quot;movie-card-plot&quot;&amp;gt;' + data.plot + '&amp;lt;/div&amp;gt;',
                      '&amp;lt;/div&amp;gt;',
                      '&amp;lt;/div&amp;gt;'].join('\n');
            },
            footer: '&amp;lt;a href=&quot;/search&quot; id=&quot;view-more-movies&quot; class=&quot;btn btn-primary btn-sm text-center center-block&quot;&amp;gt;View More&amp;lt;/a&amp;gt;'
        }
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This function initializes typeahead on the selector using the adapter passed in – the Bloodhound
object created in the previous function. As you can see, typeahead lets you customize
every part of the display, so you can get it to look just how you want it to look.
Most of this initialization is just setting the templates, so here’s the CSS to go with it:&lt;/p&gt;

&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;language-CSS&quot;&gt;/** Twitter Typeahead **/
.twitter-typeahead, .typeahead, .empty-message  {
    width: 100%;
}

.tt-menu {
    background: white;
    width: 100%;
}

.tt-suggestion {
    overflow: hidden;
    display: table;
    width: 100%;
    padding: 10px 10px;
    border-bottom: 1px solid #e9ecf2;
}

/** Movie Card (Movie Suggestions) **/
.movie-card {
    position: relative;
    padding: 8px;
}

.movie-card-poster {
    position: absolute;
    top: 8px;
    left: 8px;
    width: 52px;
    height: 52px;
    border: 2px solid #ccd6dd;
    border-radius: 5px;
}

.movie-card:hover .movie-card-poster {
    border-color: #f5f8fa;
}

.movie-card-details {
    min-height: 60px;
    padding-left: 60px;
}

.movie-card-name,
.movie-card-year {
    display: inline-block;
}

.movie-card-name {
    font-weight: 700;
}

.movie-card-year {
    color: #8899a6;
}

.movie-card:hover .movie-card-year {
    color: #fff;
}

.movie-card-plot {
    margin-top: 5px;
    font-size: 14px;
    line-height: 18px;
}

.movie-card:hover,
.movie-card.is-active {
    color: #fff;
    background: #0088CC;
    cursor: pointer;
}

.empty-message {
    position: relative;
    padding: 10px;
    font-size: 16px;
    line-height: 30px;
    text-align: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The suggestion display (“movie card”) for a movie is based off of the “user card”
on Twitter and used a lot of CSS from a typeahead example. I use some helper
classes from Bootstrap, so if you aren’t using Bootstrap, then you’ll need to add
in the alignments yourself so things look right.&lt;/p&gt;

&lt;h2 id=&quot;view-more-results&quot;&gt;View More Results&lt;/h2&gt;
&lt;p&gt;This isn’t really anything specific to typeahead; this is just something useful.
At the bottom of each list of suggestions, I have a link to view more results,
and this function simply takes the current search term and includes it in the
query. This way, when the user clicks the link, the search page will actually
show all of the results for their current search term and not just bring them to
a blank search page.&lt;/p&gt;

&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;// #view-more-movies is the link shown at the bottom of the list of suggestions
$(document).on('click', '#view-more-movies', function(e) {
    e.stopPropagation();
    e.preventDefault();
    query = $(e.target).parent().parent().siblings('.tt-input').val();
    window.location.href = '/search?q=' + encodeURIComponent(query);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;do-something-when-user-clicks-a-suggestion&quot;&gt;Do Something When User Clicks a Suggestion&lt;/h2&gt;
&lt;p&gt;On MovieLib, when a user clicks on a suggestion from the search bar, a modal will
pop up with info on that movie. To display that modal, I need to get the IMDB ID from the
suggestion so I know what movie to fetch:&lt;/p&gt;

&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;$('.typeahead').on('typeahead:selected typeahead:autocompleted', function(e, datum) {
    $.magnificPopup.open({
        items: {
            src: 'movies/view/' + datum.imdb_id
        },
        type: 'ajax'
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You probably aren’t using Magnific Popup, but as you can see, you can easily access
properties of the datum object that was selected. This example also shows just how
easy typeahead makes it to bind to certain typeahead events!
For a full list of typeahead events you can bind to, click &lt;a href=&quot;https://github.com/twitter/typeahead.js/blob/master/doc/jquery_typeahead.md#custom-events&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;using-typeahead-in-forms&quot;&gt;Using Typeahead in Forms&lt;/h2&gt;
&lt;p&gt;MovieLib also uses typeahead in the “Add Movie” forms. What the server expects
from the form is an IMDB ID to indicate the movie being added, so when a user
selects a movie, all I need to do is set the value of the movie input.  If you’re
wondering why I’m using two different inputs here, it’s because of how Django
handles form widgets. It was easier to add a second input to use for the suggestions
and make the &lt;em&gt;actual&lt;/em&gt; movie input hidden from the user.&lt;/p&gt;

&lt;pre class=&quot;prettyprint linenums&quot;&gt;&lt;code class=&quot;language-JavaScript&quot;&gt;// #select-movie is the input I used to initialize typeahead
$('#select-movie').on('typeahead:selected typeahead:autocompleted', function(e, datum) {
    // this input is the input that needs the imdb_id value
    $('input[name=movie]').val(datum.imdb_id);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h2&gt;
&lt;p&gt;So, that basically wraps it up! I recommend looking at the documentation for
typeahead if you want to do more with it. It’s definitely a fun library
to mess around with! To see these examples in action, check out my site below!&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Jul 2015 00:00:00 -0500</pubDate>
        <link>http://codeinpink.github.io/blog/2015/07/adding-autocomplete-to-inputs-through-twitters-typeahead/</link>
        <guid isPermaLink="true">http://codeinpink.github.io/blog/2015/07/adding-autocomplete-to-inputs-through-twitters-typeahead/</guid>
        
        <category>javascript</category>
        
        <category>tutorial</category>
        
        <category>typeahead</category>
        
        <category>jQuery</category>
        
        
        <category>tutorial</category>
        
      </item>
    
      <item>
        <title>Obligatory &quot;Hello World&quot;</title>
        <description>&lt;p&gt;Just like how every programmer first starts with a “Hello World” program, it’s
basically mandatory for “Hello World” to be every programmer’s first blog post!
 So, here it is: &lt;strong&gt;Hello World!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 25 Jul 2015 00:00:00 -0500</pubDate>
        <link>http://codeinpink.github.io/blog/2015/07/obligatory-hello-world/</link>
        <guid isPermaLink="true">http://codeinpink.github.io/blog/2015/07/obligatory-hello-world/</guid>
        
        
        <category>general</category>
        
      </item>
    
  </channel>
</rss>
